using System.Collections.Generic;
using System.Text;
using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using KendoGridAjaxEditing.Models;
using System.Linq;
using System.Web.Mvc;
using System.Data;

namespace KendoGridAjaxEditing.Controllers
{
    public class HomeController : Controller
    {
        private IList<ProductViewModel> _productsList;

        public HomeController()
        {
            this._productsList = new List<ProductViewModel>
                {
                    new ProductViewModel
                        {
                            ProductID = 1,
                            ProductName = "Chai",
                            UnitsInStock = 2
                        },
                    new ProductViewModel
                        {
                            ProductID = 2,
                            ProductName = "Chang",
                            UnitsInStock = 0
                        },
                    new ProductViewModel
                        {
                            ProductID = 3,
                            ProductName = "Aniseed Syrup",
                            UnitsInStock = 14
                        },
                    new ProductViewModel
                        {
                            ProductID = 4,
                            ProductName = "Chef Anton's Cajun Seasoning",
                            UnitsInStock = 6
                        },
                    new ProductViewModel
                        {
                            ProductID = 5,
                            ProductName = "Chef Anton's Gumbo Mix",
                            UnitsInStock = 1
                        },
                    new ProductViewModel
                        {
                            ProductID = 6,
                            ProductName = "Grandma's Boysenberry Spread",
                            UnitsInStock = 2
                        },
                    new ProductViewModel
                        {
                            ProductID = 7,
                            ProductName = "Uncle Bob's Organic Dried Pears",
                            UnitsInStock = 2
                        },
                    new ProductViewModel
                        {
                            ProductID = 8,
                            ProductName = "Northwoods Cranberry Sauce",
                            UnitsInStock = 0
                        },
                    new ProductViewModel
                        {
                            ProductID = 9,
                            ProductName = "Mishi Kobe Nik",
                            UnitsInStock = 14
                        },
                    new ProductViewModel
                        {
                            ProductID = 10,
                            ProductName = "Queso Cabrales",
                            UnitsInStock = 6
                        },
                    new ProductViewModel
                        {
                            ProductID = 11,
                            ProductName = "Queso Manchego La Pastora",
                            UnitsInStock = 1
                        },
                    new ProductViewModel
                        {
                            ProductID = 12,
                            ProductName = "Konbu",
                            UnitsInStock = 2
                        }
                };
        }

        public ActionResult Index()
        {
            return View();
        }

        public ActionResult BinList_Read([DataSourceRequest]DataSourceRequest request)
        {
            using (var northwind = new NorthwindEntities())
            {
                IQueryable<Product> products = northwind.Products;
                DataSourceResult result = products.ToDataSourceResult(request);
                return Json(result);
            }
        }

        public ActionResult Products_Create([DataSourceRequest]DataSourceRequest request, ProductViewModel product)
        {
            if (ModelState.IsValid)
            {
                using (var northwind = new NorthwindEntities())
                {
                    // Create a new Product entity and set its properties from the posted ProductViewModel
                    var entity = new Product
                    {
                        ProductName = product.ProductName,
                        UnitsInStock = product.UnitsInStock
                    };
                    // Add the entity
                    northwind.Products.Add(entity);
                    // Insert the entity in the database
                    northwind.SaveChanges();
                    // Get the ProductID generated by the database
                    product.ProductID = entity.ProductID;
                }
            }
            // Return the inserted product. The grid needs the generated ProductID. Also return any validation errors.
            return Json(new[] { product }.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Products_Update([DataSourceRequest]DataSourceRequest request, ProductViewModel product)
        {
            if (product.ProductName.Length < 3)
            {
                ModelState.AddModelError("ProductName", "ProductName should be at least three characters long.");
            }

            if (ModelState.IsValid)
            {
                using (var northwind = new NorthwindEntities())
                {
                    // Create a new Product entity and set its properties from the posted ProductViewModel
                    var entity = new Product
                    {
                        ProductID = product.ProductID,
                        ProductName = product.ProductName,
                        UnitsInStock = product.UnitsInStock
                    };
                    // Attach the entity
                    northwind.Products.Attach(entity);
                    // Change its state to Modified so Entity Framework can update the existing product instead of creating a new one
                    northwind.Entry(entity).State = EntityState.Modified;
                    // Or use ObjectStateManager if using a previous version of Entity Framework
                    // northwind.ObjectStateManager.ChangeObjectState(entity, EntityState.Modified);
                    // Update the entity in the database
                    northwind.SaveChanges();
                }
            }
            // Return the updated product. Also return any validation errors.
            return Json(new[] { product }.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Products_Destroy([DataSourceRequest]DataSourceRequest request, ProductViewModel product)
        {
            if (ModelState.IsValid)
            {
                using (var northwind = new NorthwindEntities())
                {
                    // Create a new Product entity and set its properties from the posted ProductViewModel
                    var entity = new Product
                    {
                        ProductID = product.ProductID,
                        ProductName = product.ProductName,
                        UnitsInStock = product.UnitsInStock
                    };
                    // Attach the entity
                    northwind.Products.Attach(entity);
                    // Delete the entity
                    northwind.Products.Remove(entity);
                    // Or use DeleteObject if using a previous versoin of Entity Framework
                    // northwind.Products.DeleteObject(entity);
                    // Delete the entity in the database
                    northwind.SaveChanges();
                }
            }
            // Return the removed product. Also return any validation errors.
            return Json(new[] { product }.ToDataSourceResult(request, ModelState));
        }

        public JsonResult GetData()
        {
            // uncomment for returning mock list
            //return Json(this._productsList, JsonRequestBehavior.AllowGet);

            using (var northwind = new NorthwindEntities())
            {
                IQueryable<Product> products = northwind.Products;
                var result = products.Select(p => new ProductViewModel
                    {
                        ProductID = p.ProductID,
                        ProductName = p.ProductName,
                        UnitsInStock = p.UnitsInStock
                    }).ToList();
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }
    }
}
